function t(key) {
    if ("undefined" != typeof _i18n) {
        var v = _i18n[key];
        if (null != v)return v
    }
    return key
}
var NotificationTable = React.createClass({displayName: "NotificationTable", getInitialState: function () {
    return{n: [], recentlyRemoved: []}
}, loadNotifications: function () {
    $.ajax({url: this.props.url, datatype: "json", success: function (data) {
        var s = this.state, recentlyRemoved = s.recentlyRemoved, notifs = data.filter(function (notif) {
            return-1 == $.inArray(notif.id, recentlyRemoved)
        });
        this.setState({n: notifs, recentlyRemoved: recentlyRemoved})
    }.bind(this), error: function (xhr, status, err) {
    }.bind(this)})
}, componentDidMount: function () {
    this.loadNotifications(), setInterval(this.loadNotifications, this.props.pollInterval)
}, sortBy: function (criterion) {
    var component = this;
    return function () {
        var n = component.state.n.sort(function (a, b) {
            return a[criterion].localeCompare(b[criterion])
        });
        component.setState({n: n, recentlyRemoved: this.state.recentlyRemoved})
    }
}, removeNotif: function (id) {
    var notifs = this.state.n.filter(function (n) {
        return n.id != id
    }), recentlyRemoved = this.state.recentlyRemoved;
    recentlyRemoved.push(id), this.setState({n: notifs, recentlyRemoved: recentlyRemoved}), $.ajax({url: this.props.url + "/" + id, method: "delete", datatype: "json", success: function () {
    }.bind(this), error: function (xhr, status, err) {
    }.bind(this)})
}, render: function () {
    var callback = this.removeNotif;
    if (0 == this.state.n.length)return React.DOM.div({className: "standard-form"}, t("no-notification"));
    var notificationNodes = this.state.n.map(function (notif) {
        return Notification({key: notif.id, notif: notif, onRemoveNotif: callback})
    });
    return React.DOM.div({className: "standard-form"}, React.DOM.div({className: "row form-table-header"}, React.DOM.div({className: "col-sm-2", onClick: this.sortBy("date")}, t("date")), React.DOM.div({className: "col-sm-2", onClick: this.sortBy("appName")}, t("app")), React.DOM.div({className: "col-sm-6", onClick: this.sortBy("formattedText")}, t("message"))), notificationNodes)
}}), Notification = React.createClass({displayName: "Notification", removeNotif: function () {
    this.props.onRemoveNotif(this.props.notif.id)
}, render: function () {
    return React.DOM.div({className: "row form-table-row"}, React.DOM.div({className: "col-sm-2"}, this.props.notif.dateText), React.DOM.div({className: "col-sm-2"}, this.props.notif.appName), React.DOM.div({className: "col-sm-6", dangerouslySetInnerHTML: {__html: this.props.notif.formattedText}}), React.DOM.div({className: "col-sm-2"}, React.DOM.a({href: this.props.notif.url, target: "_new", className: "btn btn-primary"}, t("manage")), React.DOM.a({href: "#", className: "btn btn-primary", onClick: this.removeNotif}, t("archive"))))
}});
React.renderComponent(NotificationTable({url: notificationService, pollInterval: 2e3}), document.getElementById("notifications"));