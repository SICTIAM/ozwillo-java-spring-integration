var Modal = React.createClass({displayName: "Modal", componentDidMount: function () {
    $(this.getDOMNode()).modal({show: !1})
}, componentWillUnmount: function () {
    $(this.getDOMNode()).off("hidden")
}, close: function () {
    $(this.getDOMNode()).modal("hide")
}, open: function () {
    $(this.getDOMNode()).modal("show")
}, render: function () {
    var buttons;
    if (this.props.infobox) {
        var label;
        label = this.props.buttonLabels ? this.props.buttonLabels.ok : t("ui.close"), buttons = [React.DOM.button({key: "close", className: "btn btn-primary-inverse", onClick: this.close}, label)]
    } else {
        var cancelLabel, saveLabel;
        this.props.buttonLabels ? (cancelLabel = this.props.buttonLabels.cancel, saveLabel = this.props.buttonLabels.save) : (cancelLabel = t("ui.cancel"), saveLabel = t("ui.save")), buttons = [React.DOM.button({key: "cancel", className: "btn btn-default", onClick: this.close}, cancelLabel), React.DOM.button({key: "success", className: "btn btn-primary", onClick: this.props.successHandler}, saveLabel)]
    }
    return React.DOM.div({className: "modal fade"}, React.DOM.div({className: "modal-dialog" + (this.props.large ? " modal-lg" : "")}, React.DOM.div({className: "modal-content"}, React.DOM.div({className: "modal-header"}, React.DOM.button({type: "button", className: "close", onClick: this.close}, "Ã—"), React.DOM.h3(null, this.props.title)), React.DOM.div({className: "modal-body"}, this.props.children), React.DOM.div({className: "modal-footer"}, buttons))))
}}), Typeahead = React.createClass({displayName: "Typeahead", componentDidMount: function () {
    $(this.getDOMNode()).typeahead({minLength: 3, highlight: !0}, {source: this.props.source, displayKey: "fullname"}).on("typeahead:selected", function (event, selected) {
        void 0 != this.props.onSelect && this.props.onSelect(selected), $(this.getDOMNode()).typeahead("val", "")
    }.bind(this))
}, render: function () {
    return React.DOM.input({className: "form-control", type: "text", placeholder: this.props.placeholder})
}}), MyPop = React.createClass({displayName: "MyPop", getInitialState: function () {
    return{open: !1, offset: 0}
}, toggle: function (event) {
    this.setState({open: !this.state.open, offset: $(event.target).outerWidth()})
}, renderChildren: function () {
    if (this.state.open) {
        var margin = (600 - this.state.offset) / 2;
        return React.DOM.div({className: "popup", style: {"margin-left": "-" + margin + "px"}}, React.DOM.div({className: "arrow"}), React.DOM.div({className: "popup-content"}, this.props.children))
    }
    return null
}, render: function () {
    var children = this.renderChildren();
    return React.DOM.div(null, React.DOM.a({className: this.props.className, onClick: this.toggle}, this.props.label), children)
}}), PopoverButton = React.createClass({displayName: "PopoverButton", componentDidMount: function () {
    var html = $(this.getDOMNode()).children("div").html();
    $(this.getDOMNode()).children("div").hide(), $(this.getDOMNode()).children("button").popover({title: this.props.title, content: html, html: !0, placement: "bottom", trigger: "click"})
}, render: function () {
    return React.DOM.div(null, React.DOM.button({className: this.props.className}, this.props.label), React.DOM.div({className: "popover-content"}, this.props.children))
}});