!function () {
    var Dashboard = React.createClass({
        displayName: "Dashboard",
        notificationsChecked: !1,
        checkNotifications: function () {
            this.state.apps && $.ajax({
                url: dash_service + "/notifications",
                type: "get",
                dataType: "json",
                success: function (appNotifs) {
                    for (var state = this.state, i = 0; i < state.apps.length; i++) {
                        var app = state.apps[i];
                        app.notificationCount = appNotifs[app.serviceId] ? appNotifs[app.serviceId] : 0
                    }
                    this.setState(state)
                }.bind(this),
                error: function (xhr, status, err) {
                }.bind(this)
            }), window.setTimeout(this.checkNotifications, 2e3)
        },
        initNotificationsCheck: function () {
            this.notificationsChecked || (this.notificationsChecked = !0, this.checkNotifications())
        },
        componentDidMount: function () {
            this.initNotificationsCheck(), $.ajax({
                url: dash_service + "/dashboards",
                type: "get",
                dataType: "json",
                success: function (data) {
                    this.state.dashboards = data, this.state.dash = data[0], this.state.loadingDashboards = !1, this.setState(this.state)
                }.bind(this),
                error: function (xhr, status, err) {
                }.bind(this)
            }), $.ajax({
                url: dash_service + "/apps", type: "get", dataType: "json", success: function (data) {
                    this.state.apps = data, this.state.loadingApps = !1, this.setState(this.state)
                }.bind(this), error: function (xhr, status, err) {
                }.bind(this)
            })
        },
        getInitialState: function () {
            return {dashboards: null, dash: null, apps: null, dragging: !1, loadingDashboards: !0, loadingApps: !0}
        },
        findById: function (array, obj) {
            for (var i in array)if (array[i].id == obj.id)return i
        },
        startDrag: function (app) {
            return function (event) {
                event.dataTransfer.setData("application/json", JSON.stringify({app: app}));
                var state = this.state;
                state.dragging = !0, this.setState(state)
            }.bind(this)
        },
        endDrag: function () {
            var state = this.state;
            state.dragging = !1, this.setState(state)
        },
        reorderApps: function (before) {
            return function (app) {
                var state = this.state;
                state.dragging = !1;
                var fr = this.findById(this.state.apps, app);
                if ("last" != before) {
                    var to = this.findById(this.state.apps, before);
                    if (to != fr) {
                        var removed = state.apps.splice(fr, 1), to = this.findById(this.state.apps, before);
                        state.apps.splice(to, 0, removed[0])
                    }
                } else {
                    var removed = state.apps.splice(fr, 1);
                    state.apps.splice(state.apps.length, 0, removed[0])
                }
                $.ajax({
                    url: dash_service + "/apps/" + state.dash.id,
                    type: "put",
                    contentType: "application/json",
                    data: JSON.stringify(state.apps),
                    success: function () {
                    }.bind(this),
                    error: function (xhr, status, err) {
                        this.setState(this.getInitialState()), this.componentDidMount()
                    }.bind(this)
                }), this.setState(state)
            }.bind(this)
        },
        switchToDashboard: function (dash) {
            return function () {
                var state = this.state;
                state.dash = dash, state.loadingApps = !0, this.setState(state), $.ajax({
                    url: dash_service + "/apps/" + dash.id,
                    type: "get",
                    dataType: "json",
                    success: function (data) {
                        state.apps = data, state.loadingApps = !1, this.setState(state)
                    }.bind(this),
                    error: function (xhr, status, err) {
                    }.bind(this)
                })
            }.bind(this)
        },
        moveToDash: function (dash) {
            return function (app) {
                $.ajax({
                    url: dash_service + "/apps/move/" + app.id + "/to/" + dash.id,
                    type: "post",
                    success: function () {
                    },
                    error: function (xhr, status, err) {
                        this.setState(this.getInitialState()), this.componentDidMount()
                    }.bind(this)
                });
                var state = this.state, index = this.findById(state.apps, app);
                state.apps.splice(index, 1), state.dragging = !1, this.setState(state)
            }.bind(this)
        },
        deleteApp: function (app) {
            var state = this.state;
            state.apps.splice(this.findById(state.apps, app), 1), state.dragging = !1, this.setState(state), $.ajax({
                url: dash_service + "/apps/remove/" + app.id,
                type: "delete",
                success: function () {
                }.bind(this),
                error: function (xhr, status, err) {
                    this.setState(this.getInitialState()), this.componentDidMount()
                }.bind(this)
            })
        },
        createDash: function (name) {
            var state = this.state;
            $.ajax({
                url: dash_service + "/dashboards",
                type: "post",
                dataType: "json",
                data: JSON.stringify({name: name}),
                contentType: "application/json",
                success: function (userContext) {
                    state.dashboards.push(userContext), this.setState(state), this.switchToDashboard(userContext)
                }.bind(this),
                error: function (xhr, status, err) {
                    this.setState(this.getInitialState()), this.componentDidMount()
                }.bind(this)
            })
        },
        renameDash: function (dash) {
            return function (name) {
                var idx = this.findById(this.state.dashboards, dash);
                this.state.dashboards[idx].name = name, this.setState(this.state), $.ajax({
                    url: dash_service + "/dashboard/" + dash.id,
                    type: "put",
                    contentType: "application/json",
                    data: JSON.stringify(this.state.dashboards[idx]),
                    error: function (xhr, status, err) {
                        this.setState(this.getInitialState()), this.componentDidMount()
                    }.bind(this)
                })
            }.bind(this)
        },
        removeDash: function (dash) {
            return function () {
                var state = this.state;
                state.loadingDashboards = !0, this.setState(state), $.ajax({
                    url: dash_service + "/dashboard/" + dash.id,
                    type: "delete",
                    success: function () {
                        this.setState(this.getInitialState()), this.componentDidMount()
                    }.bind(this),
                    error: function (xhr, status, err) {
                        this.setState(this.getInitialState()), this.componentDidMount()
                    }.bind(this)
                })
            }.bind(this)
        },
        render: function () {
            return React.DOM.div({className: "row"}, SideBar({
                loading: this.state.loadingDashboards,
                dashboards: this.state.dashboards,
                currentDash: this.state.dash,
                dragging: this.state.dragging,
                switchToDashboard: this.switchToDashboard,
                moveToDash: this.moveToDash,
                deleteApp: this.deleteApp,
                createDash: this.createDash,
                renameDash: this.renameDash,
                removeDash: this.removeDash
            }), Desktop({
                loading: this.state.loadingApps,
                apps: this.state.apps,
                startDrag: this.startDrag,
                endDrag: this.endDrag,
                dragging: this.state.dragging,
                dropCallback: this.reorderApps
            }))
        }
    }), SideBar = React.createClass({
        displayName: "SideBar", render: function () {
            if (this.props.loading)return React.DOM.div({className: "col-sm-2 text-center dash-switcher"}, React.DOM.i({className: "fa fa-spinner fa-spin"}), " ", t("ui.loading"));
            var dashboards = this.props.dashboards.map(function (dash) {
                return DashItem({
                    key: dash.id,
                    dash: dash,
                    active: dash == this.props.currentDash,
                    dragging: this.props.dragging,
                    switchCallback: this.props.switchToDashboard(dash),
                    moveToDash: this.props.moveToDash(dash),
                    rename: this.props.renameDash(dash),
                    remove: this.props.removeDash(dash)
                })
            }.bind(this));
            return React.DOM.div({className: "col-sm-2 text-center dash-switcher"}, React.DOM.img({src: image_root + "my/switch-dash.png"}), React.DOM.p(null, t("switch-dash")), React.DOM.ul({className: "nav nav-pills nav-stacked text-left"}, dashboards), CreateDashboard({addDash: this.props.createDash}), DeleteApp({
                dragging: this.props.dragging,
                "delete": this.props.deleteApp
            }))
        }
    }), DashItem = React.createClass({
        displayName: "DashItem", getInitialState: function () {
            return {over: !1, editing: !1}
        }, select: function (event) {
            event.preventDefault(), this.props.switchCallback && this.props.switchCallback()
        }, over: function (isOver) {
            return function (event) {
                event.preventDefault();
                var state = this.state;
                state.over = isOver, this.setState(state)
            }.bind(this)
        }, drop: function (event) {
            var app = JSON.parse(event.dataTransfer.getData("application/json")).app;
            this.props.moveToDash(app);
            var state = this.state;
            state.over = !1, this.setState(state)
        }, edit: function () {
            this.state.editing = !0, this.setState(this.state)
        }, cancelEditing: function () {
            this.state.editing = !1, this.setState(this.state)
        }, render: function () {
            if (this.props.active)return this.state.editing ? EditingDash({
                name: this.props.dash.name,
                rename: this.props.rename,
                cancel: this.cancelEditing
            }) : React.DOM.li({className: "active"}, React.DOM.a({
                onClick: function (e) {
                    e.preventDefault()
                }
            }, this.props.dash.name, DashActions({
                remove: this.props.remove,
                edit: this.edit,
                primary: this.props.dash.main
            })));
            var className = this.props.dragging ? this.state.over ? "dragging over" : "dragging" : "";
            return React.DOM.li(null, React.DOM.a({
                href: "#",
                className: className,
                onDragOver: this.over(!0),
                onDragLeave: this.over(!1),
                onClick: this.select,
                onDrop: this.drop
            }, this.props.dash.name))
        }
    }), DashActions = React.createClass({
        displayName: "DashActions", remove: function () {
            this.props.remove(), this.refs.modal.close()
        }, showRemove: function () {
            this.refs.modal.open()
        }, render: function () {
            if (this.props.primary)return React.DOM.div({className: "pull-right"}, React.DOM.i({
                className: "fa fa-pencil",
                onClick: this.props.edit
            }));
            var buttonLabels = {save: t("ui.yes"), cancel: t("ui.cancel")};
            return React.DOM.div({className: "pull-right"}, Modal({
                title: t("confirm-delete-dash"),
                successHandler: this.remove,
                buttonLabels: buttonLabels,
                ref: "modal"
            }, React.DOM.p(null, t("confirm-delete-dash-long"))), React.DOM.i({
                className: "fa fa-pencil",
                onClick: this.props.edit
            }), " ", React.DOM.i({className: "fa fa-trash", onClick: this.showRemove}))
        }
    }), EditingDash = React.createClass({
        displayName: "EditingDash", getInitialState: function () {
            return {val: this.props.name}
        }, componentDidMount: function () {
            var input = $(this.getDOMNode()).find("input");
            input.focus(), input.select()
        }, change: function (event) {
            var state = this.state;
            state.val = event.target.value, this.setState(state)
        }, click: function (event) {
            event.preventDefault(), event.stopPropagation()
        }, submit: function (event) {
            event.preventDefault(), this.props.rename(this.state.val), this.props.cancel()
        }, render: function () {
            return React.DOM.li({className: "active"}, React.DOM.form({onSubmit: this.submit}, React.DOM.input({
                type: "text",
                className: "form-control",
                value: this.state.val,
                onChange: this.change,
                onClick: this.click
            })), React.DOM.div({className: "dash-veil", onClick: this.props.cancel}))
        }
    }), CreateDashboard = React.createClass({
        displayName: "CreateDashboard", getInitialState: function () {
            return {val: ""}
        }, change: function (event) {
            this.setState({val: event.target.value})
        }, submit: function (event) {
            event.preventDefault(), this.props.addDash(this.state.val), this.setState(this.getInitialState())
        }, render: function () {
            return React.DOM.form({
                role: "form",
                id: "create-dash",
                onSubmit: this.submit
            }, React.DOM.div({className: "form-group"}, React.DOM.label({htmlFor: "dashboardname"}, t("create")), React.DOM.input({
                type: "text",
                name: "dashboardname",
                id: "dashboardname",
                className: "form-control",
                value: this.state.val,
                onChange: this.change
            })), React.DOM.div({className: "text-right"}, React.DOM.input({
                type: "image",
                src: image_root + "/icon/plus.png",
                alt: t("ui.ok"),
                onClick: this.submit
            })))
        }
    }), DeleteApp = React.createClass({
        displayName: "DeleteApp", getInitialState: function () {
            return {over: !1, app: null}
        }, over: function (isOver) {
            return function (event) {
                isOver && event.preventDefault(), this.setState({over: isOver})
            }.bind(this)
        }, drop: function (event) {
            var app = JSON.parse(event.dataTransfer.getData("application/json")).app;
            this.setState({over: !0, app: app}), this.refs.modal.open()
        }, removeApp: function () {
            var app = this.state.app;
            this.props.delete(app), this.refs.modal.close(), this.setState(this.getInitialState())
        }, cancel: function () {
            this.setState(this.getInitialState())
        }, render: function () {
            if (this.props.dragging || this.state.app) {
                var className = "delete-app" + (this.state.over ? " over" : ""), buttonLabels = {
                    save: t("ui.yes"),
                    cancel: t("ui.cancel")
                };
                return React.DOM.div({
                    className: className,
                    onDragOver: this.over(!0),
                    onDragLeave: this.over(!1),
                    onDrop: this.drop
                }, Modal({
                    title: t("confirm-remove-app"),
                    successHandler: this.removeApp,
                    cancelHandler: this.cancel,
                    buttonLabels: buttonLabels,
                    ref: "modal"
                }, React.DOM.p(null, t("confirm-remove-app-long"))), React.DOM.span(null, React.DOM.i({className: "fa fa-trash"})))
            }
            return null
        }
    }), Desktop = React.createClass({
        displayName: "Desktop", getInitialState: function () {
            return {dragging: !1}
        }, render: function () {
            if (this.props.loading)return React.DOM.div({className: "col-sm-10 desktop"}, React.DOM.i({className: "fa fa-spinner fa-spin"}), " ", t("ui.loading"));
            var icons = this.props.apps.map(function (app) {
                return AppZone({
                    key: app.id,
                    app: app,
                    startDrag: this.props.startDrag,
                    endDrag: this.props.endDrag,
                    dragging: this.props.dragging,
                    dropCallback: this.props.dropCallback
                })
            }.bind(this));
            return icons.push(AddNew({
                key: "last",
                dragging: this.props.dragging,
                dropCallback: this.props.dropCallback
            })), React.DOM.div({className: "col-sm-10 desktop"}, icons)
        }
    }), AppZone = React.createClass({
        displayName: "AppZone", render: function () {
            return React.DOM.div({className: "appzone"}, DropZone({
                dragging: this.props.dragging,
                dropCallback: this.props.dropCallback(this.props.app)
            }), AppIcon({app: this.props.app, startDrag: this.props.startDrag, endDrag: this.props.endDrag}))
        }
    }), AddNew = React.createClass({
        displayName: "AddNew", render: function () {
            return React.DOM.div({className: "appzone"}, DropZone({
                dragging: this.props.dragging,
                dropCallback: this.props.dropCallback("last")
            }), React.DOM.div({className: "app text-center"}, React.DOM.a({
                href: store_root,
                className: "add-more",
                draggable: "false"
            }, React.DOM.img({src: image_root + "icon/plus.png"})), React.DOM.p(null, t("ui.add"))))
        }
    }), DropZone = React.createClass({
        displayName: "DropZone", getInitialState: function () {
            return {over: !1}
        }, dragOver: function (event) {
            event.preventDefault(), this.setState({over: !0})
        }, dragLeave: function () {
            this.setState({over: !1})
        }, drop: function (event) {
            var data = JSON.parse(event.dataTransfer.getData("application/json"));
            this.props.dropCallback(data.app), this.setState({over: !1})
        }, render: function () {
            var className = "dropzone" + (this.state.over ? " dragover" : "") + (this.props.dragging ? " dragging" : "");
            return React.DOM.div({
                className: className,
                onDragOver: this.dragOver,
                onDragLeave: this.dragLeave,
                onDrop: this.drop
            })
        }
    }), AppIcon = React.createClass({
        displayName: "AppIcon", render: function () {
            var notif = null, url = this.props.app.url;
            return 0 != this.props.app.notificationCount && (notif = React.DOM.span({className: "badge badge-notifications"}, this.props.app.notificationCount), url = this.props.app.notificationUrl), React.DOM.div({
                className: "app text-center",
                draggable: "true",
                onDragStart: this.props.startDrag(this.props.app),
                onDragEnd: this.props.endDrag
            }, React.DOM.img({src: this.props.app.icon, alt: this.props.app.name}), React.DOM.a({
                href: url,
                className: "app-link",
                draggable: "false"
            }), notif, React.DOM.p(null, this.props.app.name))
        }
    });
    React.renderComponent(Dashboard(null), document.getElementById("dashboard"))
}();