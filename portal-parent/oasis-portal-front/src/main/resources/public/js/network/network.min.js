var MyNetwork = React.createClass({
    displayName: "MyNetwork", openCreateOrgDialog: function () {
        this.refs.createOrgDialog.show()
    }, reload: function () {
        this.refs.orgs.loadOrganizations()
    }, render: function () {
        return React.DOM.div(null, CreateOrganization({
            ref: "createOrgDialog",
            successHandler: this.reload
        }), SearchOrCreateHeader({showDialog: this.openCreateOrgDialog}), OrganizationsList({ref: "orgs"}))
    }
}), SearchOrCreateHeader = React.createClass({
    displayName: "SearchOrCreateHeader", render: function () {
        return React.DOM.h2(null, t("find-or-create-organization"), " ", React.DOM.a({
            className: "btn btn-success",
            href: "#",
            onClick: this.props.showDialog
        }, t("ui.go")))
    }
}), OrganizationsList = React.createClass({
    displayName: "OrganizationsList", getInitialState: function () {
        return {loading: !0, organizations: []}
    }, loadOrganizations: function () {
        $.ajax({
            url: network_service + "/organizations", type: "get", dataType: "json", success: function (data) {
                this.setState({organizations: data, loading: !1})
            }.bind(this), error: function (xhr, status, err) {
                this.setState({generalError: !0})
            }.bind(this)
        })
    }, updateOrganization: function (organization) {
        var idx, orgs = this.state.organizations;
        for (var i in orgs)if (orgs[i].id == organization.id) {
            idx = i;
            break
        }
        orgs[idx] = organization, this.setState({
            loading: !1,
            organizations: orgs
        }), $.ajax({
            url: network_service + "/organization/" + organization.id,
            type: "post",
            contentType: "application/json",
            data: JSON.stringify(organization),
            success: function () {
            }.bind(this),
            error: function (xhr, status, err) {
                this.loadOrganizations()
            }.bind(this)
        })
    }, componentDidMount: function () {
        this.loadOrganizations()
    }, render: function () {
        if (this.state.generalError)return React.DOM.p({className: "alert alert-danger"}, t("ui.general-error"));
        if (this.state.loading)return React.DOM.p({className: "text-center"}, React.DOM.i({className: "fa fa-spinner fa-spin"}), " ", t("ui.loading"));
        var reload = this.loadOrganizations, updateOrg = this.updateOrganization, orgs = this.state.organizations.map(function (org) {
            return Organization({key: org.id, org: org, reload: reload, updateOrganization: updateOrg})
        });
        return React.DOM.div({className: "organizations"}, orgs)
    }
}), Organization = React.createClass({
    displayName: "Organization", getInitialState: function () {
        return {invite: {email: "", errors: []}}
    }, updateInvitation: function (event) {
        var state = this.state;
        state.invite.email = event.target.value, state.invite.errors = [], this.setState(state)
    }, invite: function () {
        var state = this.state;
        "" == this.state.invite.email.trim() || -1 == this.state.invite.email.indexOf("@") ? (state.invite.errors = ["email"], this.setState(state)) : $.ajax({
            url: network_service + "/invite/" + this.props.org.id,
            type: "post",
            contentType: "application/json",
            data: JSON.stringify({email: state.invite.email}),
            success: function () {
                var state = this.state;
                state.invite = {
                    email: "",
                    errors: []
                }, this.refs.inviteDialog.close(), this.props.reload(), this.setState(state)
            }.bind(this),
            error: function (xhr, status, err) {
                this.state.invite.errors = ["general"], this.setState(this.state)
            }.bind(this)
        })
    }, openInvitation: function () {
        var state = this.state;
        state.invite = {email: "", errors: []}, this.setState(state), this.refs.inviteDialog.open()
    }, confirmLeave: function () {
        this.refs.leaveDialog.open()
    }, leave: function () {
        $.ajax({
            url: network_service + "/leave",
            type: "post",
            contentType: "application/json",
            data: JSON.stringify({organization: this.props.org.id}),
            success: function () {
                this.props.reload()
            }.bind(this),
            error: function (xhr, status, err) {
            }.bind(this)
        }), this.refs.leaveDialog.close()
    }, showInformation: function () {
        this.refs.infoDialog.open()
    }, deleteOrganization: function () {
        $.ajax({
            url: network_service + "/organization/" + this.props.org.id, type: "delete", success: function () {
                this.props.reload()
            }.bind(this), error: function (xhr, status, err) {
            }.bind(this)
        })
    }, removeMember: function (member) {
        return function (event) {
            event && event.preventDefault();
            var org = this.props.org;
            org.members = org.members.filter(function (m) {
                return m.id != member.id
            }), this.props.updateOrganization(org)
        }.bind(this)
    }, updateMember: function (member) {
        var org = this.props.org;
        for (var i in org.members)if (org.members[i].id == member.id) {
            org.members[i].admin = member.admin;
            break
        }
        this.props.updateOrganization(org)
    }, renderMembers: function () {
        if (this.props.org.admin) {
            var remove = this.removeMember, updateMember = this.updateMember, members = this.props.org.members.map(function (member) {
                return Member({key: member.id, member: member, remove: remove, updateMember: updateMember})
            });
            return members
        }
        return this.props.org.members.map(function (member) {
            return ReadOnlyMember({key: member.id, member: member})
        })
    }, render: function () {
        var buttons = [React.DOM.a({
            key: "info",
            className: "btn btn-primary-inverse",
            onClick: this.showInformation
        }, t("information"))], dialogs = [LeaveDialog({
            ref: "leaveDialog",
            onSubmit: this.leave
        }), InformationDialog({ref: "infoDialog", org: this.props.org})], membersList = this.renderMembers();
        return this.props.org.admin ? (1 != this.props.org.members.filter(function (m) {
            return m.admin
        }).length && buttons.push(React.DOM.a({
            key: "leave",
            className: "btn btn-warning-inverse",
            onClick: this.confirmLeave
        }, t("leave"))), buttons.push(React.DOM.a({
            key: "invite",
            className: "btn btn-success-inverse",
            onClick: this.openInvitation
        }, t("invite"))), devmode && buttons.push(React.DOM.a({
            key: "delete",
            className: "btn btn-danger",
            onClick: this.deleteOrganization
        }, t("delete"))), dialogs.push(InviteDialog({
            ref: "inviteDialog",
            admin: this.props.org.admin,
            onSubmit: this.invite,
            onChange: this.updateInvitation,
            email: this.state.invite.email,
            errors: this.state.invite.errors
        }))) : buttons.push(React.DOM.a({
            key: "leave",
            className: "btn btn-warning-inverse",
            onClick: this.confirmLeave
        }, t("leave"))), React.DOM.div({className: "standard-form"}, dialogs, React.DOM.div({className: "row form-table-header"}, React.DOM.div({className: "col-sm-6"}, this.props.org.name), React.DOM.div({className: "col-sm-6"}, buttons)), membersList)
    }
}), Member = React.createClass({
    displayName: "Member", getInitialState: function () {
        return {edit: !1, member: this.props.member}
    }, toggleEdit: function (event) {
        null != event && event.preventDefault(), this.setState(this.state.edit ? {
            edit: !1,
            member: JSON.parse(JSON.stringify(this.props.member))
        } : {edit: !0, member: JSON.parse(JSON.stringify(this.props.member))})
    }, save: function (event) {
        event.preventDefault(), this.props.updateMember(this.state.member), this.toggleEdit(null)
    }, renderAdmin: function () {
        var admin = this.state.member.admin, edit = this.state.edit;
        return edit ? React.DOM.div(null, React.DOM.input({
            className: "switch",
            type: "checkbox",
            checked: admin,
            onChange: function () {
                var state = this.state;
                state.member.admin = !admin, this.setState(state)
            }.bind(this)
        }), React.DOM.label(null, t(admin ? "admin" : "user"))) : t(admin ? "admin" : "user")
    }, render: function () {
        var member = this.state.member, remove = this.props.remove, toggleEdit = this.toggleEdit, save = this.save, actions = null;
        member.self || (actions = this.state.edit ? React.DOM.div({className: "col-sm-4 col-sm-offset-2"}, React.DOM.a({
            className: "lnk accept",
            href: "#",
            onClick: save
        }, React.DOM.i({className: "fa fa-check"}), t("ui.save")), React.DOM.a({
            className: "lnk cancel",
            href: "#",
            onClick: toggleEdit
        }, React.DOM.i({className: "fa fa-times"}), t("ui.cancel"))) : React.DOM.div({className: "col-sm-4 col-sm-offset-2"}, React.DOM.a({
            className: "lnk edit",
            href: "#",
            onClick: toggleEdit
        }, React.DOM.i({className: "fa fa-pencil"}), t("ui.edit")), React.DOM.a({
            className: "lnk remove",
            href: "#",
            onClick: remove(member)
        }, React.DOM.i({className: "fa fa-trash"}), t("ui.remove"))));
        var adminStatus = this.renderAdmin();
        return React.DOM.div({
            key: member.id,
            className: "row form-table-row"
        }, React.DOM.div({className: "col-sm-3"}, member.name), React.DOM.div({className: "col-sm-3"}, adminStatus), actions)
    }
}), ReadOnlyMember = React.createClass({
    displayName: "ReadOnlyMember", render: function () {
        return React.DOM.div({
            key: this.props.member.id,
            className: "row form-table-row"
        }, React.DOM.div({className: "col-sm-3"}, this.props.member.name), React.DOM.div({className: "col-sm-3"}, t("admin")))
    }
}), InviteDialog = React.createClass({
    displayName: "InviteDialog", open: function () {
        this.refs.modal.open()
    }, close: function () {
        this.refs.modal.close()
    }, componentDidMount: function () {
        this.refs.modal && $(this.refs.modal.getDOMNode()).on("shown.bs.modal", function () {
            $("input", this).first().focus()
        })
    }, render: function () {
        if (this.props.admin) {
            var inviteButtonLabels = {
                save: t("invite"),
                cancel: t("ui.cancel")
            }, labelClassName = -1 == $.inArray("email", this.props.errors) ? "col-sm-4" : "col-sm-4 error", generalError = -1 != $.inArray("general", this.props.errors) ? React.DOM.p({
                className: "alert alert-danger",
                role: "alert"
            }, t("ui.general-error")) : null;
            return Modal({
                ref: "modal",
                title: t("invite"),
                successHandler: this.props.onSubmit,
                buttonLabels: inviteButtonLabels
            }, React.DOM.form({
                className: "form-horizontal",
                onSubmit: this.props.onSubmit
            }, React.DOM.div({className: "form-group"}, React.DOM.label({
                htmlFor: "email",
                className: labelClassName
            }, t("email")), React.DOM.div({className: "col-sm-8"}, React.DOM.input({
                className: "form-control",
                id: "email",
                type: "text",
                value: this.props.email,
                onChange: this.props.onChange,
                placeholder: "name@domain.eu"
            }))), generalError))
        }
        return null
    }
}), LeaveDialog = React.createClass({
    displayName: "LeaveDialog", open: function () {
        this.refs.modal.open()
    }, close: function () {
        this.refs.modal.close()
    }, render: function () {
        var leaveButtonLabels = {cancel: t("ui.cancel"), save: t("yes-i-want-to-leave")};
        return Modal({
            ref: "modal",
            title: t("leave"),
            successHandler: this.props.onSubmit,
            buttonLabels: leaveButtonLabels
        }, React.DOM.p(null, t("confirm-leave")))
    }
}), InformationDialog = React.createClass({
    displayName: "InformationDialog", open: function () {
        this.refs.modal.open()
    }, render: function () {
        return Modal({
            ref: "modal",
            infobox: !0,
            buttonLabels: {ok: t("ui.close")},
            title: t("information")
        }, React.DOM.h4(null, this.props.org.name), React.DOM.p(null, t("organization-type." + this.props.org.type)))
    }
});
React.renderComponent(MyNetwork(null), document.getElementById("mynetwork"));